% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pca_function.R
\name{select_optimal_factors}
\alias{select_optimal_factors}
\title{Select Optimal Number of Factors Using Information Criterion}
\usage{
select_optimal_factors(returns, max_factors, T_h, kernel_func, bandwidth)
}
\arguments{
\item{returns}{A numeric matrix of asset returns with \eqn{T} rows (time periods) and \eqn{p} columns (assets).}

\item{max_factors}{An integer specifying the maximum number of factors to consider.}

\item{T_h}{A numeric value representing the effective window size, typically derived from the bandwidth parameter.}

\item{kernel_func}{A function representing the kernel used for weighting. Typically, an
Epanechnikov kernel or another boundary kernel function.}

\item{bandwidth}{A numeric value indicating the bandwidth parameter for the kernel function.}
}
\value{
A list containing:
\describe{
  \item{\code{optimal_m}}{Integer. The optimal number of factors selected based on the information criterion.}
  \item{\code{IC_values}}{Numeric vector. Information Criterion values for each number of factors from 1 to \code{max_factors}.}
  \item{\code{V_m_values}}{Numeric vector. \code{V_m} values corresponding to each number of factors.}
  \item{\code{penalty_values}}{Numeric vector. Penalty terms added to the information criterion for each number of factors.}
}
}
\description{
This function determines the optimal number of principal components (factors) to retain
in a portfolio optimization context by minimizing an information criterion. The criterion
balances model fit and complexity to prevent overfitting.
}
\details{
The function iterates over the number of factors \eqn{m} from 1 to \code{max_factors} and performs the following:
\enumerate{
  \item Computes \code{V_m} using the \code{compute_V_m} function.
  \item Calculates a penalty term to account for model complexity.
  \item Computes the Information Criterion (IC) as the sum of the logarithm of \code{V_m} and the penalty.
}
The optimal number of factors \eqn{m} is the one that minimizes the Information Criterion.
}
\examples{
# Load necessary library
library(ggplot2)

# Simulate data for 50 assets over 200 time periods
set.seed(123)
T <- 200
p <- 50
returns <- matrix(rnorm(T * p, mean = 0.001, sd = 0.02), ncol = p)

# Define an Epanechnikov kernel function (assuming it's defined elsewhere)
epanechnikov_kernel <- function(u) {
  ifelse(abs(u) <= 1, 0.75 * (1 - u^2), 0)
}

# Select the optimal number of factors with m up to 10 and bandwidth = 0.1
selection_results <- select_optimal_factors(
  returns = returns,
  max_factors = 10,
  T_h = T * 0.1,
  kernel_func = epanechnikov_kernel,
  bandwidth = 0.1
)
print(selection_results$optimal_m)

}
